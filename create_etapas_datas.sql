-- Create the table if it doesn't exist
CREATE TABLE IF NOT EXISTS etapas_datas (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    obra_id BIGINT NOT NULL,
    etapa_nome TEXT NOT NULL,
    data_inicio DATE,
    data_fim DATE,
    status TEXT NOT NULL DEFAULT 'pendente',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT etapas_datas_status_check CHECK (status IN ('pendente', 'em_andamento', 'concluida')),
    CONSTRAINT etapas_datas_obra_id_fkey FOREIGN KEY (obra_id) REFERENCES obras(id) ON DELETE CASCADE
);

-- Create indexes if they don't exist
CREATE INDEX IF NOT EXISTS etapas_datas_obra_id_idx ON etapas_datas(obra_id);
CREATE INDEX IF NOT EXISTS etapas_datas_status_idx ON etapas_datas(status);

-- Enable Row Level Security (if not already enabled)
ALTER TABLE IF EXISTS etapas_datas ENABLE ROW LEVEL SECURITY;

-- Drop existing policies if they exist
DO $$ 
BEGIN
    DROP POLICY IF EXISTS "Enable read access for all users" ON etapas_datas;
    DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON etapas_datas;
    DROP POLICY IF EXISTS "Enable update for authenticated users only" ON etapas_datas;
    DROP POLICY IF EXISTS "Enable delete for authenticated users only" ON etapas_datas;
EXCEPTION
    WHEN undefined_object THEN
END $$;

-- Create policies
CREATE POLICY "Enable read access for all users" ON etapas_datas
    FOR SELECT USING (true);

CREATE POLICY "Enable insert for authenticated users only" ON etapas_datas
    FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Enable update for authenticated users only" ON etapas_datas
    FOR UPDATE USING (auth.role() = 'authenticated');

CREATE POLICY "Enable delete for authenticated users only" ON etapas_datas
    FOR DELETE USING (auth.role() = 'authenticated');

-- Insert default stages for existing obras (only if they don't exist)
INSERT INTO etapas_datas (obra_id, etapa_nome, status)
SELECT o.id, e.etapa_nome, 'pendente'
FROM obras o
CROSS JOIN (
    VALUES 
        ('Terraplenagem'),
        ('Fundação'),
        ('Infraestrutura'),
        ('Alvenaria'),
        ('Estrutura'),
        ('Instalações Elétricas'),
        ('Instalações Hidráulicas'),
        ('Passagens'),
        ('Cobertura'),
        ('Revestimento Interno'),
        ('Revestimento Externo'),
        ('Reboco Interno'),
        ('Reboco Externo'),
        ('Pisos'),
        ('Gesso'),
        ('Marmoraria'),
        ('Pintura'),
        ('Esquadrias'),
        ('Limpeza Bruta'),
        ('Marcenaria'),
        ('Metais'),
        ('Limpeza Final')
) AS e(etapa_nome)
WHERE NOT EXISTS (
    SELECT 1 
    FROM etapas_datas ed 
    WHERE ed.obra_id = o.id 
    AND ed.etapa_nome = e.etapa_nome
); 