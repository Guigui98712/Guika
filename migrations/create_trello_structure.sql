-- Criar tabela para listas do quadro (colunas)
CREATE TABLE IF NOT EXISTS trello_lists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    obra_id BIGINT REFERENCES obras(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    position INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Criar tabela para cartões
CREATE TABLE IF NOT EXISTS trello_cards (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    list_id BIGINT REFERENCES trello_lists(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    position INTEGER NOT NULL,
    due_date DATE,
    labels TEXT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Criar índices para melhor performance
CREATE INDEX IF NOT EXISTS idx_trello_lists_obra_id ON trello_lists(obra_id);
CREATE INDEX IF NOT EXISTS idx_trello_cards_list_id ON trello_cards(list_id);
CREATE INDEX IF NOT EXISTS idx_trello_lists_position ON trello_lists(position);
CREATE INDEX IF NOT EXISTS idx_trello_cards_position ON trello_cards(position);

-- Habilitar RLS (Row Level Security)
ALTER TABLE trello_lists ENABLE ROW LEVEL SECURITY;
ALTER TABLE trello_cards ENABLE ROW LEVEL SECURITY;

-- Políticas de segurança para trello_lists
CREATE POLICY "Permitir select em trello_lists para todos"
    ON trello_lists FOR SELECT
    USING (true);

CREATE POLICY "Permitir insert em trello_lists para autenticados"
    ON trello_lists FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Permitir update em trello_lists para autenticados"
    ON trello_lists FOR UPDATE
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Permitir delete em trello_lists para autenticados"
    ON trello_lists FOR DELETE
    TO authenticated
    USING (true);

-- Políticas de segurança para trello_cards
CREATE POLICY "Permitir select em trello_cards para todos"
    ON trello_cards FOR SELECT
    USING (true);

CREATE POLICY "Permitir insert em trello_cards para autenticados"
    ON trello_cards FOR INSERT
    TO authenticated
    WITH CHECK (true);

CREATE POLICY "Permitir update em trello_cards para autenticados"
    ON trello_cards FOR UPDATE
    TO authenticated
    USING (true)
    WITH CHECK (true);

CREATE POLICY "Permitir delete em trello_cards para autenticados"
    ON trello_cards FOR DELETE
    TO authenticated
    USING (true);

-- Criar listas padrão para cada obra existente
INSERT INTO trello_lists (obra_id, title, position)
SELECT 
    o.id,
    l.title,
    l.position
FROM obras o
CROSS JOIN (
    VALUES 
        ('A Fazer', 1),
        ('Em Andamento', 2),
        ('Concluído', 3)
) AS l(title, position)
WHERE NOT EXISTS (
    SELECT 1
    FROM trello_lists tl
    WHERE tl.obra_id = o.id
);

-- Função para atualizar timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers para atualizar updated_at
CREATE TRIGGER update_trello_lists_updated_at
    BEFORE UPDATE ON trello_lists
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_trello_cards_updated_at
    BEFORE UPDATE ON trello_cards
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();