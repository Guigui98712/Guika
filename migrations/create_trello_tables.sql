-- Criar tabela de listas
CREATE TABLE IF NOT EXISTS trello_lists (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    obra_id BIGINT NOT NULL,
    title VARCHAR(255) NOT NULL,
    position INTEGER NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Criar tabela de cards
CREATE TABLE IF NOT EXISTS trello_cards (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    list_id BIGINT REFERENCES trello_lists(id) ON DELETE CASCADE,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    position INTEGER NOT NULL,
    due_date TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Criar índices para melhor performance
CREATE INDEX IF NOT EXISTS idx_trello_lists_obra_id ON trello_lists(obra_id);
CREATE INDEX IF NOT EXISTS idx_trello_cards_list_id ON trello_cards(list_id);

-- Desabilitar RLS para essas tabelas
ALTER TABLE trello_lists DISABLE ROW LEVEL SECURITY;
ALTER TABLE trello_cards DISABLE ROW LEVEL SECURITY;

-- Criar função para atualizar o updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Remover triggers se existirem
DROP TRIGGER IF EXISTS update_trello_lists_updated_at ON trello_lists;
DROP TRIGGER IF EXISTS update_trello_cards_updated_at ON trello_cards;

-- Criar triggers
CREATE TRIGGER update_trello_lists_updated_at
    BEFORE UPDATE ON trello_lists
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_trello_cards_updated_at
    BEFORE UPDATE ON trello_cards
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column(); 